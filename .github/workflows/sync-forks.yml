name: Sync All Forks

on:
  # Allows me to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs the workflow on a schedule. This is set to run daily at 3:15 AM UTC.
  # Use crontab.guru to customize the schedule.
  schedule:
    - cron: '15 3 * * *'

# Job to perform the synchronization
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout controller repository
        uses: actions/checkout@v4

      - name: Set up Git and User Identity
        id: setup
        env:
          # This step requires the PAT to determine the user identity.
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Get the username of the user who owns the PAT. This is crucial
          # because github.actor is 'github-actions[bot]' on scheduled runs.
          OWNER=$(gh api user --jq .login)
          echo "OWNER=$OWNER" >> $GITHUB_ENV

          # Configure git with the PAT owner's details for correct attribution.
          git config --global user.name "$OWNER"
          git config --global user.email "$OWNER@users.noreply.github.com"

      - name: Sync Forks
        env:
          # The PAT is used for all 'gh' and 'git' network operations.
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          
          echo "Fetching list of forked repositories for user: ${{ env.OWNER }}"
          
          # Fetch all forked repos owned by the authenticated user (PAT owner).
          # We get the repo name and the parent's full name (e.g., "upstream/repo").
          repo_list_json=$(gh repo list --fork --limit 1000 --json name,parent)
          
          # Use jq to parse the JSON and loop through each item.
          echo "$repo_list_json" | jq -c '.[]' | while read -r repo_json; do
            repo_name=$(echo "$repo_json" | jq -r '.name')
            parent_name=$(echo "$repo_json" | jq -r '.parent.nameWithOwner')
            
            # Skip if the parent repository information is missing
            if [[ "$parent_name" == "null" ]]; then
              echo "--- Skipping repository $repo_name (parent repository deleted or inaccessible) ---"
              continue
            fi

            echo "--- Processing repository: $repo_name ---"
            
            # Clone your fork using the PAT owner's username, not github.actor.
            git clone "https://x-access-token:${GH_TOKEN}@github.com/${{ env.OWNER }}/$repo_name.git"
            cd "$repo_name"
            
            # Add the original repository as a remote named "upstream"
            git remote add upstream "https://github.com/$parent_name.git"
            
            # Fetch all branches from the upstream and prune deleted ones
            git fetch upstream --prune
            
            # Get a clean list of all branches on the upstream remote
            upstream_branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/upstream/ | sed 's/upstream\///')
            
            for branch in $upstream_branches; do
              echo "Syncing branch: $branch"
              
              # Check if the branch exists locally.
              if ! git show-ref --verify --quiet "refs/heads/$branch"; then
                # If not, create it to track the upstream branch.
                git checkout -b "$branch" "upstream/$branch"
              else
                # If it exists, check it out.
                git checkout "$branch"
                # Merge changes from the upstream branch.
                # The --ff-only flag ensures we only fast-forward, preventing merge commits on your fork.
                # If a fast-forward is not possible, it will fail, which is safer.
                git merge "upstream/$branch" --ff-only
              fi
            done
            
            # Push all updated branches back to your fork (origin)
            echo "Pushing all updated branches to origin..."
            git push --all origin
            
            cd ..
            rm -rf "$repo_name"
            
            echo "--- Finished processing $repo_name ---"
            echo ""
          done
