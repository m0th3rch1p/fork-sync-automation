name: Sync All Forks

on:
  # Allows me to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs the workflow on a schedule. This is set to run daily at 3:15 AM UTC.
  # Use crontab.guru to customize the schedule.
  schedule:
    - cron: '15 3 * * *'

# Job to perform the synchronization
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout controller repository
        uses: actions/checkout@v4

      - name: Set up Git and User Identity
        id: setup
        env:
          # This step requires the PAT to determine the user identity.
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Get the username of the user who owns the PAT. This is crucial
          # because github.actor is 'github-actions[bot]' on scheduled runs.
          OWNER=$(gh api user --jq .login)
          echo "OWNER=$OWNER" >> $GITHUB_ENV

          # Configure git with the PAT owner's details for correct attribution.
          git config --global user.name "$OWNER"
          git config --global user.email "$OWNER@users.noreply.github.com"
          
          # Configure Git to use the PAT for all HTTPS operations to github.com.
          git config --global url."https://x-access-token:${GH_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Sync Forks
        env:
          # The PAT is used for all 'gh' and 'git' network operations.
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          
          echo "Fetching list of forked repositories for user: ${{ env.OWNER }}"
          
          # Fetch only the names of the forked repos first.
          repo_list_json=$(gh repo list --fork --limit 1000 --json name)
          
          # Use jq to parse the JSON and loop through each item.
          echo "$repo_list_json" | jq -c '.[]' | while read -r repo_json; do
            repo_name=$(echo "$repo_json" | jq -r '.name')
            
            echo "--- Processing repository: $repo_name ---"

            # Use `gh repo view` to get parent info reliably for each repo.
            # This is more robust than getting it from the list view.
            parent_info_json=$(gh repo view "${{ env.OWNER }}/$repo_name" --json parent)
            parent_name=$(echo "$parent_info_json" | jq -r 'if .parent and .parent.owner and .parent.name then .parent.owner.login + "/" + .parent.name else "null" end')
            
            # Skip if the parent repository information is missing or the fork relationship is broken.
            if [[ "$parent_name" == "null" ]]; then
              echo "--- Skipping '$repo_name': Could not resolve parent repository. The fork relationship may be broken or the parent is inaccessible. ---"
              continue
            fi

            # Clone your fork using the PAT owner's username, not github.actor.
            git clone "https://x-access-token:${GH_TOKEN}@github.com/${{ env.OWNER }}/$repo_name.git"
            cd "$repo_name"
            
            # Add the original repository as a remote named "upstream"
            git remote add upstream "https://github.com/$parent_name.git"
            
            # Fetch all branches from the upstream and prune deleted ones
            git fetch upstream --prune
            
            # Get a clean list of all branches on the upstream remote
            upstream_refs=$(git for-each-ref --format='%(refname:short)' 'refs/remotes/upstream/*')

            # Use a direct fetch with a refspec to mirror upstream branches locally.
            for branch in $upstream_branches; do
              echo "Mirroring upstream branch '$branch' to local"
              
              # This command fetches the specific branch from upstream and forces the
              # local branch of the same name to match it. This is a mirror operation.
              # The '+' allows non-fast-forward updates (i.e., overwriting local changes).
              git fetch upstream "+refs/heads/$branch:refs/heads/$branch"
            done
            
            # Push all updated branches back to your fork (origin)
            echo "Pushing all updated branches to origin..."
            git push --all origin
            
            cd ..
            rm -rf "$repo_name"
            
            echo "--- Finished processing $repo_name ---"
            echo ""
          done
